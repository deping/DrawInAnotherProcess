// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbDrawHWND.proto

#include "PbDrawHWND.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace RMsg {
class PbHWND_TypeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbHWND_TypeInfo> _instance;
} _PbHWND_TypeInfo_default_instance_;
class PbHWNDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbHWND> _instance;
} _PbHWND_default_instance_;
class PbDrawFrame_TypeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbDrawFrame_TypeInfo> _instance;
} _PbDrawFrame_TypeInfo_default_instance_;
class PbDrawFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbDrawFrame> _instance;
} _PbDrawFrame_default_instance_;
class PbMouseEvent_TypeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbMouseEvent_TypeInfo> _instance;
} _PbMouseEvent_TypeInfo_default_instance_;
class PbMouseEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbMouseEvent> _instance;
} _PbMouseEvent_default_instance_;
class PbFinish_TypeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbFinish_TypeInfo> _instance;
} _PbFinish_TypeInfo_default_instance_;
class PbFinishDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbFinish> _instance;
} _PbFinish_default_instance_;
}  // namespace RMsg
static void InitDefaultsPbHWND_TypeInfo_PbDrawHWND_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RMsg::_PbHWND_TypeInfo_default_instance_;
    new (ptr) ::RMsg::PbHWND_TypeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RMsg::PbHWND_TypeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbHWND_TypeInfo_PbDrawHWND_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbHWND_TypeInfo_PbDrawHWND_2eproto}, {}};

static void InitDefaultsPbHWND_PbDrawHWND_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RMsg::_PbHWND_default_instance_;
    new (ptr) ::RMsg::PbHWND();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RMsg::PbHWND::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbHWND_PbDrawHWND_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbHWND_PbDrawHWND_2eproto}, {}};

static void InitDefaultsPbDrawFrame_TypeInfo_PbDrawHWND_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RMsg::_PbDrawFrame_TypeInfo_default_instance_;
    new (ptr) ::RMsg::PbDrawFrame_TypeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RMsg::PbDrawFrame_TypeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbDrawFrame_TypeInfo_PbDrawHWND_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbDrawFrame_TypeInfo_PbDrawHWND_2eproto}, {}};

static void InitDefaultsPbDrawFrame_PbDrawHWND_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RMsg::_PbDrawFrame_default_instance_;
    new (ptr) ::RMsg::PbDrawFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RMsg::PbDrawFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbDrawFrame_PbDrawHWND_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbDrawFrame_PbDrawHWND_2eproto}, {}};

static void InitDefaultsPbMouseEvent_TypeInfo_PbDrawHWND_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RMsg::_PbMouseEvent_TypeInfo_default_instance_;
    new (ptr) ::RMsg::PbMouseEvent_TypeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RMsg::PbMouseEvent_TypeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbMouseEvent_TypeInfo_PbDrawHWND_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbMouseEvent_TypeInfo_PbDrawHWND_2eproto}, {}};

static void InitDefaultsPbMouseEvent_PbDrawHWND_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RMsg::_PbMouseEvent_default_instance_;
    new (ptr) ::RMsg::PbMouseEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RMsg::PbMouseEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbMouseEvent_PbDrawHWND_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbMouseEvent_PbDrawHWND_2eproto}, {}};

static void InitDefaultsPbFinish_TypeInfo_PbDrawHWND_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RMsg::_PbFinish_TypeInfo_default_instance_;
    new (ptr) ::RMsg::PbFinish_TypeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RMsg::PbFinish_TypeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbFinish_TypeInfo_PbDrawHWND_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbFinish_TypeInfo_PbDrawHWND_2eproto}, {}};

static void InitDefaultsPbFinish_PbDrawHWND_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RMsg::_PbFinish_default_instance_;
    new (ptr) ::RMsg::PbFinish();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RMsg::PbFinish::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbFinish_PbDrawHWND_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbFinish_PbDrawHWND_2eproto}, {}};

namespace RMsg {
bool MouseEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PbHWND_TypeInfo::InitAsDefaultInstance() {
}
class PbHWND_TypeInfo::HasBitSetters {
 public:
  static void set_has_category(PbHWND_TypeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_method(PbHWND_TypeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbHWND_TypeInfo::kCategoryFieldNumber;
const int PbHWND_TypeInfo::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbHWND_TypeInfo::PbHWND_TypeInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RMsg.PbHWND.TypeInfo)
}
PbHWND_TypeInfo::PbHWND_TypeInfo(const PbHWND_TypeInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&category_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:RMsg.PbHWND.TypeInfo)
}

void PbHWND_TypeInfo::SharedCtor() {
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&category_)) + sizeof(method_));
}

PbHWND_TypeInfo::~PbHWND_TypeInfo() {
  // @@protoc_insertion_point(destructor:RMsg.PbHWND.TypeInfo)
  SharedDtor();
}

void PbHWND_TypeInfo::SharedDtor() {
}

void PbHWND_TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbHWND_TypeInfo& PbHWND_TypeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PbHWND_TypeInfo_PbDrawHWND_2eproto.base);
  return *internal_default_instance();
}


void PbHWND_TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RMsg.PbHWND.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&category_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_) -
        reinterpret_cast<char*>(&category_)) + sizeof(method_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PbHWND_TypeInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PbHWND_TypeInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // optional int32 Category = 1 [default = 0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_category(value);
        break;
      }
      // optional int32 Method = 2 [default = 0];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_method(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PbHWND_TypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RMsg.PbHWND.TypeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Category = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_category(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Method = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RMsg.PbHWND.TypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RMsg.PbHWND.TypeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PbHWND_TypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RMsg.PbHWND.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 Category = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category(), output);
  }

  // optional int32 Method = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->method(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RMsg.PbHWND.TypeInfo)
}

size_t PbHWND_TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RMsg.PbHWND.TypeInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 Category = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // optional int32 Method = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbHWND_TypeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PbHWND_TypeInfo*>(&from));
}

void PbHWND_TypeInfo::MergeFrom(const PbHWND_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RMsg.PbHWND.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbHWND_TypeInfo::CopyFrom(const PbHWND_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RMsg.PbHWND.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbHWND_TypeInfo::IsInitialized() const {
  return true;
}

void PbHWND_TypeInfo::Swap(PbHWND_TypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbHWND_TypeInfo::InternalSwap(PbHWND_TypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
  swap(method_, other->method_);
}

::std::string PbHWND_TypeInfo::GetTypeName() const {
  return "RMsg.PbHWND.TypeInfo";
}


// ===================================================================

void PbHWND::InitAsDefaultInstance() {
}
class PbHWND::HasBitSetters {
 public:
  static void set_has_hwnd(PbHWND* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbHWND::kHwndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbHWND::PbHWND()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RMsg.PbHWND)
}
PbHWND::PbHWND(const PbHWND& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hwnd_ = from.hwnd_;
  // @@protoc_insertion_point(copy_constructor:RMsg.PbHWND)
}

void PbHWND::SharedCtor() {
  hwnd_ = GOOGLE_PROTOBUF_LONGLONG(0);
}

PbHWND::~PbHWND() {
  // @@protoc_insertion_point(destructor:RMsg.PbHWND)
  SharedDtor();
}

void PbHWND::SharedDtor() {
}

void PbHWND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbHWND& PbHWND::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PbHWND_PbDrawHWND_2eproto.base);
  return *internal_default_instance();
}


void PbHWND::Clear() {
// @@protoc_insertion_point(message_clear_start:RMsg.PbHWND)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hwnd_ = GOOGLE_PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PbHWND::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PbHWND*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required int64 hwnd = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_hwnd(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PbHWND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RMsg.PbHWND)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 hwnd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hwnd(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hwnd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RMsg.PbHWND)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RMsg.PbHWND)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PbHWND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RMsg.PbHWND)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 hwnd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hwnd(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RMsg.PbHWND)
}

size_t PbHWND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RMsg.PbHWND)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int64 hwnd = 1;
  if (has_hwnd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->hwnd());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbHWND::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PbHWND*>(&from));
}

void PbHWND::MergeFrom(const PbHWND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RMsg.PbHWND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hwnd()) {
    set_hwnd(from.hwnd());
  }
}

void PbHWND::CopyFrom(const PbHWND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RMsg.PbHWND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbHWND::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PbHWND::Swap(PbHWND* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbHWND::InternalSwap(PbHWND* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hwnd_, other->hwnd_);
}

::std::string PbHWND::GetTypeName() const {
  return "RMsg.PbHWND";
}


// ===================================================================

void PbDrawFrame_TypeInfo::InitAsDefaultInstance() {
}
class PbDrawFrame_TypeInfo::HasBitSetters {
 public:
  static void set_has_category(PbDrawFrame_TypeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_method(PbDrawFrame_TypeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbDrawFrame_TypeInfo::kCategoryFieldNumber;
const int PbDrawFrame_TypeInfo::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbDrawFrame_TypeInfo::PbDrawFrame_TypeInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RMsg.PbDrawFrame.TypeInfo)
}
PbDrawFrame_TypeInfo::PbDrawFrame_TypeInfo(const PbDrawFrame_TypeInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&category_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:RMsg.PbDrawFrame.TypeInfo)
}

void PbDrawFrame_TypeInfo::SharedCtor() {
  category_ = 0;
  method_ = 1;
}

PbDrawFrame_TypeInfo::~PbDrawFrame_TypeInfo() {
  // @@protoc_insertion_point(destructor:RMsg.PbDrawFrame.TypeInfo)
  SharedDtor();
}

void PbDrawFrame_TypeInfo::SharedDtor() {
}

void PbDrawFrame_TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbDrawFrame_TypeInfo& PbDrawFrame_TypeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PbDrawFrame_TypeInfo_PbDrawHWND_2eproto.base);
  return *internal_default_instance();
}


void PbDrawFrame_TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RMsg.PbDrawFrame.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    category_ = 0;
    method_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PbDrawFrame_TypeInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PbDrawFrame_TypeInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // optional int32 Category = 1 [default = 0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_category(value);
        break;
      }
      // optional int32 Method = 2 [default = 1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_method(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PbDrawFrame_TypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RMsg.PbDrawFrame.TypeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Category = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_category(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Method = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RMsg.PbDrawFrame.TypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RMsg.PbDrawFrame.TypeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PbDrawFrame_TypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RMsg.PbDrawFrame.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 Category = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category(), output);
  }

  // optional int32 Method = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->method(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RMsg.PbDrawFrame.TypeInfo)
}

size_t PbDrawFrame_TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RMsg.PbDrawFrame.TypeInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 Category = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // optional int32 Method = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbDrawFrame_TypeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PbDrawFrame_TypeInfo*>(&from));
}

void PbDrawFrame_TypeInfo::MergeFrom(const PbDrawFrame_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RMsg.PbDrawFrame.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbDrawFrame_TypeInfo::CopyFrom(const PbDrawFrame_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RMsg.PbDrawFrame.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbDrawFrame_TypeInfo::IsInitialized() const {
  return true;
}

void PbDrawFrame_TypeInfo::Swap(PbDrawFrame_TypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbDrawFrame_TypeInfo::InternalSwap(PbDrawFrame_TypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
  swap(method_, other->method_);
}

::std::string PbDrawFrame_TypeInfo::GetTypeName() const {
  return "RMsg.PbDrawFrame.TypeInfo";
}


// ===================================================================

void PbDrawFrame::InitAsDefaultInstance() {
}
class PbDrawFrame::HasBitSetters {
 public:
  static void set_has_hwnd(PbDrawFrame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbDrawFrame::kHwndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbDrawFrame::PbDrawFrame()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RMsg.PbDrawFrame)
}
PbDrawFrame::PbDrawFrame(const PbDrawFrame& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hwnd_ = from.hwnd_;
  // @@protoc_insertion_point(copy_constructor:RMsg.PbDrawFrame)
}

void PbDrawFrame::SharedCtor() {
  hwnd_ = GOOGLE_PROTOBUF_LONGLONG(0);
}

PbDrawFrame::~PbDrawFrame() {
  // @@protoc_insertion_point(destructor:RMsg.PbDrawFrame)
  SharedDtor();
}

void PbDrawFrame::SharedDtor() {
}

void PbDrawFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbDrawFrame& PbDrawFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PbDrawFrame_PbDrawHWND_2eproto.base);
  return *internal_default_instance();
}


void PbDrawFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:RMsg.PbDrawFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hwnd_ = GOOGLE_PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PbDrawFrame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PbDrawFrame*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required int64 hwnd = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_hwnd(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PbDrawFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RMsg.PbDrawFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 hwnd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hwnd(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hwnd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RMsg.PbDrawFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RMsg.PbDrawFrame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PbDrawFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RMsg.PbDrawFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 hwnd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hwnd(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RMsg.PbDrawFrame)
}

size_t PbDrawFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RMsg.PbDrawFrame)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int64 hwnd = 1;
  if (has_hwnd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->hwnd());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbDrawFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PbDrawFrame*>(&from));
}

void PbDrawFrame::MergeFrom(const PbDrawFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RMsg.PbDrawFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hwnd()) {
    set_hwnd(from.hwnd());
  }
}

void PbDrawFrame::CopyFrom(const PbDrawFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RMsg.PbDrawFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbDrawFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PbDrawFrame::Swap(PbDrawFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbDrawFrame::InternalSwap(PbDrawFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hwnd_, other->hwnd_);
}

::std::string PbDrawFrame::GetTypeName() const {
  return "RMsg.PbDrawFrame";
}


// ===================================================================

void PbMouseEvent_TypeInfo::InitAsDefaultInstance() {
}
class PbMouseEvent_TypeInfo::HasBitSetters {
 public:
  static void set_has_category(PbMouseEvent_TypeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_method(PbMouseEvent_TypeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbMouseEvent_TypeInfo::kCategoryFieldNumber;
const int PbMouseEvent_TypeInfo::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbMouseEvent_TypeInfo::PbMouseEvent_TypeInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RMsg.PbMouseEvent.TypeInfo)
}
PbMouseEvent_TypeInfo::PbMouseEvent_TypeInfo(const PbMouseEvent_TypeInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&category_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:RMsg.PbMouseEvent.TypeInfo)
}

void PbMouseEvent_TypeInfo::SharedCtor() {
  category_ = 0;
  method_ = 2;
}

PbMouseEvent_TypeInfo::~PbMouseEvent_TypeInfo() {
  // @@protoc_insertion_point(destructor:RMsg.PbMouseEvent.TypeInfo)
  SharedDtor();
}

void PbMouseEvent_TypeInfo::SharedDtor() {
}

void PbMouseEvent_TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbMouseEvent_TypeInfo& PbMouseEvent_TypeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PbMouseEvent_TypeInfo_PbDrawHWND_2eproto.base);
  return *internal_default_instance();
}


void PbMouseEvent_TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RMsg.PbMouseEvent.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    category_ = 0;
    method_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PbMouseEvent_TypeInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PbMouseEvent_TypeInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // optional int32 Category = 1 [default = 0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_category(value);
        break;
      }
      // optional int32 Method = 2 [default = 2];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_method(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PbMouseEvent_TypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RMsg.PbMouseEvent.TypeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Category = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_category(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Method = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RMsg.PbMouseEvent.TypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RMsg.PbMouseEvent.TypeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PbMouseEvent_TypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RMsg.PbMouseEvent.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 Category = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category(), output);
  }

  // optional int32 Method = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->method(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RMsg.PbMouseEvent.TypeInfo)
}

size_t PbMouseEvent_TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RMsg.PbMouseEvent.TypeInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 Category = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // optional int32 Method = 2 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbMouseEvent_TypeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PbMouseEvent_TypeInfo*>(&from));
}

void PbMouseEvent_TypeInfo::MergeFrom(const PbMouseEvent_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RMsg.PbMouseEvent.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbMouseEvent_TypeInfo::CopyFrom(const PbMouseEvent_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RMsg.PbMouseEvent.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMouseEvent_TypeInfo::IsInitialized() const {
  return true;
}

void PbMouseEvent_TypeInfo::Swap(PbMouseEvent_TypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbMouseEvent_TypeInfo::InternalSwap(PbMouseEvent_TypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
  swap(method_, other->method_);
}

::std::string PbMouseEvent_TypeInfo::GetTypeName() const {
  return "RMsg.PbMouseEvent.TypeInfo";
}


// ===================================================================

void PbMouseEvent::InitAsDefaultInstance() {
}
class PbMouseEvent::HasBitSetters {
 public:
  static void set_has_kind(PbMouseEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(PbMouseEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(PbMouseEvent* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbMouseEvent::kKindFieldNumber;
const int PbMouseEvent::kXFieldNumber;
const int PbMouseEvent::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbMouseEvent::PbMouseEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RMsg.PbMouseEvent)
}
PbMouseEvent::PbMouseEvent(const PbMouseEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:RMsg.PbMouseEvent)
}

void PbMouseEvent::SharedCtor() {
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(y_));
}

PbMouseEvent::~PbMouseEvent() {
  // @@protoc_insertion_point(destructor:RMsg.PbMouseEvent)
  SharedDtor();
}

void PbMouseEvent::SharedDtor() {
}

void PbMouseEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbMouseEvent& PbMouseEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PbMouseEvent_PbDrawHWND_2eproto.base);
  return *internal_default_instance();
}


void PbMouseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:RMsg.PbMouseEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&kind_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PbMouseEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PbMouseEvent*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required .RMsg.MouseEventType kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        if (!::RMsg::MouseEventType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        ::RMsg::MouseEventType value = static_cast<::RMsg::MouseEventType>(val);
        msg->set_kind(value);
        break;
      }
      // required int32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_x(value);
        break;
      }
      // required int32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_y(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PbMouseEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RMsg.PbMouseEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RMsg.MouseEventType kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RMsg::MouseEventType_IsValid(value)) {
            set_kind(static_cast< ::RMsg::MouseEventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RMsg.PbMouseEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RMsg.PbMouseEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PbMouseEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RMsg.PbMouseEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RMsg.MouseEventType kind = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RMsg.PbMouseEvent)
}

size_t PbMouseEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RMsg.PbMouseEvent)
  size_t total_size = 0;

  if (has_kind()) {
    // required .RMsg.MouseEventType kind = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
size_t PbMouseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RMsg.PbMouseEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .RMsg.MouseEventType kind = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbMouseEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PbMouseEvent*>(&from));
}

void PbMouseEvent::MergeFrom(const PbMouseEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RMsg.PbMouseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      kind_ = from.kind_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbMouseEvent::CopyFrom(const PbMouseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RMsg.PbMouseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMouseEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PbMouseEvent::Swap(PbMouseEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbMouseEvent::InternalSwap(PbMouseEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kind_, other->kind_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::std::string PbMouseEvent::GetTypeName() const {
  return "RMsg.PbMouseEvent";
}


// ===================================================================

void PbFinish_TypeInfo::InitAsDefaultInstance() {
}
class PbFinish_TypeInfo::HasBitSetters {
 public:
  static void set_has_category(PbFinish_TypeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_method(PbFinish_TypeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbFinish_TypeInfo::kCategoryFieldNumber;
const int PbFinish_TypeInfo::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbFinish_TypeInfo::PbFinish_TypeInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RMsg.PbFinish.TypeInfo)
}
PbFinish_TypeInfo::PbFinish_TypeInfo(const PbFinish_TypeInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&category_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:RMsg.PbFinish.TypeInfo)
}

void PbFinish_TypeInfo::SharedCtor() {
  category_ = 0;
  method_ = 3;
}

PbFinish_TypeInfo::~PbFinish_TypeInfo() {
  // @@protoc_insertion_point(destructor:RMsg.PbFinish.TypeInfo)
  SharedDtor();
}

void PbFinish_TypeInfo::SharedDtor() {
}

void PbFinish_TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbFinish_TypeInfo& PbFinish_TypeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PbFinish_TypeInfo_PbDrawHWND_2eproto.base);
  return *internal_default_instance();
}


void PbFinish_TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RMsg.PbFinish.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    category_ = 0;
    method_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PbFinish_TypeInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PbFinish_TypeInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // optional int32 Category = 1 [default = 0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_category(value);
        break;
      }
      // optional int32 Method = 2 [default = 3];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_method(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PbFinish_TypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RMsg.PbFinish.TypeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Category = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_category(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Method = 2 [default = 3];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RMsg.PbFinish.TypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RMsg.PbFinish.TypeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PbFinish_TypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RMsg.PbFinish.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 Category = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category(), output);
  }

  // optional int32 Method = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->method(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RMsg.PbFinish.TypeInfo)
}

size_t PbFinish_TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RMsg.PbFinish.TypeInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 Category = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // optional int32 Method = 2 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbFinish_TypeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PbFinish_TypeInfo*>(&from));
}

void PbFinish_TypeInfo::MergeFrom(const PbFinish_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RMsg.PbFinish.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbFinish_TypeInfo::CopyFrom(const PbFinish_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RMsg.PbFinish.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFinish_TypeInfo::IsInitialized() const {
  return true;
}

void PbFinish_TypeInfo::Swap(PbFinish_TypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbFinish_TypeInfo::InternalSwap(PbFinish_TypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
  swap(method_, other->method_);
}

::std::string PbFinish_TypeInfo::GetTypeName() const {
  return "RMsg.PbFinish.TypeInfo";
}


// ===================================================================

void PbFinish::InitAsDefaultInstance() {
}
class PbFinish::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbFinish::PbFinish()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RMsg.PbFinish)
}
PbFinish::PbFinish(const PbFinish& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RMsg.PbFinish)
}

void PbFinish::SharedCtor() {
}

PbFinish::~PbFinish() {
  // @@protoc_insertion_point(destructor:RMsg.PbFinish)
  SharedDtor();
}

void PbFinish::SharedDtor() {
}

void PbFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbFinish& PbFinish::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PbFinish_PbDrawHWND_2eproto.base);
  return *internal_default_instance();
}


void PbFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:RMsg.PbFinish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PbFinish::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PbFinish*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PbFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RMsg.PbFinish)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:RMsg.PbFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RMsg.PbFinish)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PbFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RMsg.PbFinish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RMsg.PbFinish)
}

size_t PbFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RMsg.PbFinish)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbFinish::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PbFinish*>(&from));
}

void PbFinish::MergeFrom(const PbFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RMsg.PbFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PbFinish::CopyFrom(const PbFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RMsg.PbFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFinish::IsInitialized() const {
  return true;
}

void PbFinish::Swap(PbFinish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbFinish::InternalSwap(PbFinish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::std::string PbFinish::GetTypeName() const {
  return "RMsg.PbFinish";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RMsg::PbHWND_TypeInfo* Arena::CreateMaybeMessage< ::RMsg::PbHWND_TypeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::RMsg::PbHWND_TypeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RMsg::PbHWND* Arena::CreateMaybeMessage< ::RMsg::PbHWND >(Arena* arena) {
  return Arena::CreateInternal< ::RMsg::PbHWND >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RMsg::PbDrawFrame_TypeInfo* Arena::CreateMaybeMessage< ::RMsg::PbDrawFrame_TypeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::RMsg::PbDrawFrame_TypeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RMsg::PbDrawFrame* Arena::CreateMaybeMessage< ::RMsg::PbDrawFrame >(Arena* arena) {
  return Arena::CreateInternal< ::RMsg::PbDrawFrame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RMsg::PbMouseEvent_TypeInfo* Arena::CreateMaybeMessage< ::RMsg::PbMouseEvent_TypeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::RMsg::PbMouseEvent_TypeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RMsg::PbMouseEvent* Arena::CreateMaybeMessage< ::RMsg::PbMouseEvent >(Arena* arena) {
  return Arena::CreateInternal< ::RMsg::PbMouseEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RMsg::PbFinish_TypeInfo* Arena::CreateMaybeMessage< ::RMsg::PbFinish_TypeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::RMsg::PbFinish_TypeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RMsg::PbFinish* Arena::CreateMaybeMessage< ::RMsg::PbFinish >(Arena* arena) {
  return Arena::CreateInternal< ::RMsg::PbFinish >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
